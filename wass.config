# wass.config
# Copyright 2014 Tom Stage
#
# Wass is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation version 2 of the License.
#
# Wass is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Wass; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#TODO: Make sure that all the suppoted programs have their arguments section working

# General WASS Configuration File
[General]
# Who did this Scan?
# This can either be defined here or on the command line
authed-by = John Doe [john.doe@example.com]

# The To Email address
emailTo = john.doe@example.com

# The From Email address
emailFrom = wass@example.com

# Should we send the result Email for each Task, Default: True
sendEmail = False

# The Password to use for the Zip File encryption 
password = PassWord

# This is the base directory where all the result files will end up,
# the structure will be: [WASS BASE DIR]/resultDir/results/[Customer]/[TargetDomain]/[ToDay]/[CurrentTask]/scan_result
# Ex.: /home/WASS/results/WASS/zero.webappsecurity.com/2014-04-03/Whois/scan_result
# will default to the directory where the Wass.py script is lunched from
resultDir =

# URL that ZAProxy is listenning on, Default: http://127.0.0.1:8080
# This is configure inside ZAProxy under tools -> options -> local proxy
# If u wish to define a proxy you need to give all the options
proxyprotocol= http
proxyhost = 127.0.0.1
proxyport = 8080

# Should we use the ZAProxy for all the Web Scanners
# ATM. this seems to be unstable (sadly), when used by all the web sacnning tools
use_proxy = False

[Whois]
# The path to the Whois Command
cmd = /usr/bin/whois

[Arachni]
# The Arachni Command
cmd = /opt/Arachni/bin/arachni

########################################################################################################
# The following Arachni parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# --authed-by=<who> (Look at (authed-by =) below) 
# --exclude=<regex> (WASS Default: (?i)(logout|disconnect|signout|exit)+)
# --proxy=<server:port> (WASS Default: Look Above)
# --proxy-type=<type> (WASS Default: Look Above)
# --report='<report>:<optname>=<val>,<optname2>=<val2>,...' (WASS Default: --report=afr:outfile="Arachni_[TargetDomain]_[ReportDate].afr")
# With the above AFR report we create both an XML and HTML report of the result, and all 3 will be saved
########################################################################################################
arguments =

[Fierce]
# The Fierce Command
cmd = /opt/fierce2/fierce

########################################################################################################
# The following Fierce2 parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# -dns [dns name(s) or file]   The domain(s) you would like scanned. 
# -format [type]               Output format [txt || xml || html || all] (WASS Default: xml) 
# -output [file]               Output file (WASS Default: Fierce_[TargetDomain]_[ReportDate].xml)
# -template [dir]              Template Directory (WASS Default: /opt/fierce2/tt)
# -debug					   Debug option (Will be enabled if we set the loglevel to debug)
########################################################################################################
arguments = -only arin, zt, wildc, findmx, whois, hlookups

[Nikto]
# The Nikto Command
cmd = /usr/bin/nikto

########################################################################################################
# The following Nikto parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
#-host+		Target host (WASS Default: Target Dimain)
#-vhost+	Virtual host (for Host header) (WASS Default: Target Domain)
#-port+		Port to use (default 80) (WASS Default: Target Port)
#-root+		Prepend root value to all requests, format is /directory (WASS Default: Target URL)
#-useproxy	Use the proxy defined in nikto.conf (WASS Default: http://localhost:8080)
#-ask		Whether to ask about submitting updates (WASS Default: no)
#-output+	Write output to this file (WASS Default: Nikto_[TargetDomain]_[ReportDate].xml)
#-Format+	Save file (-o) format: WASS Default: xml)
########################################################################################################
arguments = -Cgidirs all

[Nmap]
# The Nmap Command
cmd = /usr/bin/nmap

########################################################################################################
# The following Nmap parameters are used by Default:
# -sV Probe open ports to determine service/version info
# -p 1-65535
# Not Allowed: -oX -oA (The program will exit if these are used)
# If you enter any arguments below the default arguments will be overwritten
########################################################################################################
arguments = -sV -T3 -O -R --version-light --webxml

# The ports to scan
port = 1-65535

[OpenVAS]
# The openvas-cli command
cmd = /usr/bin/openvas-cli

# The User Name to use for the Connection to OpenVAS
username = JohnDoe

# The Password to use for the Connection to OpenVAS, and this will also be used for the Zip File encryption 
password = PassWord

# The Host that is running the OpenVAS Scanning Daemon Default: localhost
host = localhost

# The ID of the Portlist to use from OpenVAS
# Remember to get this from your OpenVAS installation, since it is unique
# for every OpenVAS installation
port_list = [THE UNIQUE ID FROM OPENVAS]

#The ID of the Scan Config to copy from OpenVAS
# Remember to get this from your OpenVAS installation, since it is unique
# for every OpenVAS installation
scan_config = [THE UNIQUE ID FROM OPENVAS]

[Skipfish]
# The Skipfish Command
# On Centos 6.x Default executable for Skipfish 2.09b from Atomicorp repo is: /usr/bin/skipfish
# The below is for the downloaded and installed in /opt/skipfish/ 2.10b version
cmd = /opt/Skipfish/skipfish

########################################################################################################
# The following Skipfish parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# -I string        - only follow URLs matching 'string' (WASS Default: [TargetDomain])
# -o dir          - write output to specified directory (required) (WASS Default: Skipfish_[TargetDomain]_[ReportDate])
# -W wordlist     - use a specified read-write wordlist (required) (WASS Default: Skipfish_[TargetDomain]_[ReportDate].wl)
########################################################################################################
arguments = -v -u -b i -O -X /css/ -X /img/ -X /images/ -X /js/ -X /doc/ -X logout -X disconnect -X signout -X exit -Z -M -Q -Y -R 5 -G 256 -l 500 -g 50 -m 10 -f 100 -t 60 -w 60 -i 60 -s 1024000 -e

# Dont use the -S argument, it will be added if there is a list defined here
skipfishwordlist = /opt/Skipfish/dictionaries/complete.wl

[SSLyze]
# The Command
cmd = /opt/sslyze/sslyze.py

########################################################################################################
# The following SSLyze parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# --xml_out			Writes the scan results as an XML document to the file XML_FILE. (WASS Default: SSLyze_[TargetDomain]_[ReportDate].xml)
# --regular         Regular HTTPS scan;
# --https_tunnel	Tunnels all traffic to the target server(s) through an HTTP CONNECT proxy. (WASS Default: http://127.0.0.1:8080)
# --certinfo		Verifies the validity of the server(s) certificate(s). (WASS Default: full)
########################################################################################################
arguments = --hsts --compression --heartbleed --reneg

[SSLScan]
# The Command
cmd = /opt/sslscan/sslscan

########################################################################################################
# The following SSLyze parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# --xml         Output results to an XML file. (WASS Default: SSLyze_[TargetDomain]_[ReportDate].xml)
########################################################################################################
arguments = --http --bugs

[TheHarvester]
# The Command
cmd = /opt/theharvester/theHarvester.py

########################################################################################################
# The following TheHarvester parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# -d: Domain to search or company name
# -f: Save the results into an HTML and XML file. (WASS Default: TheHarvester_[TargetDomain]_[ReportDate].xml|.html)
########################################################################################################
arguments = -l 100 -h -b all 

[W3af]
# The Command
cmd = /opt/w3af/w3af_console

# The path to the profile to use for the W3af Scan
# If left blank the Default WASS_Profile.pw3af from wasslib will be used
# Options: Default, WASS_1.6_Profile.pw3af, /path/to/w3af/profile
# WASS Default: OWASP_TOP10.pw3af (This is for W3af Version 1.6)
# And is included with WASS
profile = Default

[Wapiti]
# The Wapiti Command
cmd = /usr/bin/wapiti

########################################################################################################
# The following Wapiti parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# -p <url_proxy> (WASS Default: http://127.0.0.1:8080)
# -f <type_file> (WASS Default: xml)
# -o <output> (WASS Default: Wapiti_[TargetDomain]_[ReportDate].xml) 
########################################################################################################
arguments = -v 2 -n 10 -t 120

[WhatWeb]
# The WhatWeb Command
cmd = /opt/WhatWeb/whatweb

########################################################################################################
# The following WhatWeb parameters are used by Default, and !!!SHOULD NOT!!! be parsed as arguments:
# --proxy <hostname[:port]> Set proxy hostname and port (WASS Default: http://127.0.0.1:8080)
# --log-xml Log XML format (WASS Default: WhatWeb_[TargetDomain]_[ReportDate].xml) 
########################################################################################################
arguments = -a 4

[ZAPProxy]
# The Directory ZAP is installed in, can be left blank if ZAP is in the default location on Windows
# On Linux remember the trailing slash (/)
path = /opt/ZAProxy/

# The ZAProxy executable file, for linux it is zap.sh, for windows it is zap.bat
cmd = zap.sh

# Should the ZAProxy run in daemon mode: True or False, Default: True
# You should only use False if you are running this inside am X session
daemon = True

# Attack Strength
# This controls the number of attacks that ZAP will perform.
# If you select Low then fewer attacks will be used which will be quicker but may miss some issues.
# If you select High then more attacks will be used which may find more issues but will take longer.
# The Insane level should typically only be used for small parts of an application as it can result in a very large number of attacks being used,
# which can take a considerable length of time. 
# values are: LOW, MEDIUM, HIGH or INSANE
attackStrength = MEDIUM

# Alert Threshold
# This controls how likely ZAP is to report potential vulnerabilities.
# If you select Low then more potential issues will be raised which may increase the number of false positives.
# If you select High then fewer potential issues will be raised which may mean that some real issues are missed (false negatives). 
# Values are: LOW, MEDIUM or HIGH
alertThreshold = MEDIUM

# Start ZAProxy at the start of the test? Default: True
start = True

# Stop ZAProxy at the end of the test? Default: True 
# If this is set to False the ZAProxy will continue to run in the background,
stop = True

[ZAPAlerts]
#
# ZAPAlerts are not used ATM.
#
# List of alerts to ignore - fields supported are: alert, risk, reliability, url, param
# Supplied values are treated as regexes, unsupplied values match everything
#ignore = {'alert':'X-Content-Type-Options header missing','risk':'Low','reliability':'Warning'}
# {'alert':'X-Frame-Options header not set','risk':'Informational','reliability':'Warning'}
# {'alert':'Cross Site Request Forgery','risk':'Medium','reliability':'Warning'}
# {'alert':'Weak\ HTTP\ authentication\ over\ an\ unsecured\ connection','risk':'Medium','reliability':'Warning'}
# {'alert':'Cookie\ set\ without\ HttpOnly\ flag','risk':'Low','reliability':'Warning'}
# {'alert':'Password\ Autocomplete\ in\ browser','risk':'Low','reliability':'Warning'}
ignore = 

# List of alerts to require - ie test will fail unless at least one match, same format as the 'ignore' list
#require =  {'alert':'Cross Site Request Forgery','risk':'Medium','reliability':'Warning'}
# {'alert':'Weak\ HTTP\ authentication\ over\ an\ unsecured\ connection','risk':'Medium','reliability':'Warning'}
# {'alert':'Cookie\ set\ without\ HttpOnly\ flag','risk':'Low','reliability':'Warning'}
require =

# File name in which the 'non ignored' alerts will be saved - these can be used as the basis
# of ignore/require alert lines (and are output regex escaped)
#savealerts = alerts.txt
savealerts =
